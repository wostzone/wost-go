package config_test

import (
	"flag"
	"github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/wostzone/wost-go/pkg/config"
	"github.com/wostzone/wost-go/pkg/logging"
	"io/ioutil"
	"os"
	"path"
	"testing"
)

// template used for testing config
const hubYamlTemplate = `
# generated by config_test. Do not edit.

# Message bus server
address: "127.0.0.1"
mqttPortUnpw: 9883  # username/pw based auth over MQTT/TLS
mqttPortCert: 9884  # certificate based auth over MQTT/TLS
mqttPortWS:   9995  # username password auth over WebSocket/TLS

# Logging
logLevel: "info"    # debug, info, warning, error. Default is warning
logFile: /var/log/{clientID}.log

#configFolder: "./config" # plugin config, relative to the app home folder
#certsFolder: "./certs"   # certificates, relative to the app home folder
`

const hubYamlBadTemplate = `
# generated by config_test. Do not edit.

# Message bus server
address: "127.0.0.1"
mqttPortUnpw: 9883  # username/pw based auth over MQTT/TLS
mqttPortCert: 9884  # certificate based auth over MQTT/TLS
mqttPortWS:  9995  # username password auth over WebSocket/TLS
% bad yaml: line 
`

const hubYamlRelPathTemplate = `
# generated by config_test. Do not edit.
configFolder: "."
certsFolder: "."
logFolder: "."
caCertPath: "./caCert.pem"
pluginCertPath: "./pluginCert.pem"
clientCertPath: "./clientCert.pem"
clientKeyPath: "./clientKey.pem"
`

type TestConfig struct {
	mystring string
}

// home folder created in /tmp/wost_test
var homeFolder string
var configFolder string
var hubConfigFile string

// TestMain - setup a home folder in /tmp
func TestMain(m *testing.M) {
	logging.SetLogging("info", "")
	homeFolder = path.Join(os.TempDir(), "wost-config-test")
	configFolder = path.Join(homeFolder, config.DefaultConfigFolder)
	logFolder := path.Join(homeFolder, config.DefaultLogFolder)
	certsFolder := path.Join(homeFolder, config.DefaultCertsFolder)
	os.Mkdir(homeFolder, 0750)
	os.Mkdir(configFolder, 0750)
	os.Mkdir(logFolder, 0750)
	os.Mkdir(certsFolder, 0750)

	// generate the hub config file for testing
	hubConfigFile = path.Join(configFolder, config.DefaultHubConfigName)
	ioutil.WriteFile(hubConfigFile, []byte(hubYamlTemplate), 0644)

	result := m.Run()

	//os.RemoveAll(homeFolder)
	os.Exit(result)
}

func TestDefaultConfigNoHome(t *testing.T) {
	// This result is unpredictable as it depends on where the binary lives.
	// This changes depends on whether to run as debug, coverage or F5 run
	hc := config.CreateHubConfig("")
	require.NotNil(t, hc)
	err := hc.Validate()
	_ = err // unpredictable outcome depending on executable location
}

func TestDefaultConfigWithHome(t *testing.T) {
	// vscode debug and test runs use different binary folder.
	// Use current dir instead to determine where home is.
	logrus.Infof("Home is %s", homeFolder)

	// absolute path
	hc := config.CreateHubConfig(homeFolder)
	err := hc.Validate()
	assert.NoError(t, err)

	// relative path. Expect it to fail as the folders don't exist.
	hc = config.CreateHubConfig(".")
	err = hc.Validate()
	assert.Error(t, err)
}

func TestLoadHubConfig(t *testing.T) {
	logrus.Infof("Home is %s", homeFolder)

	hc := config.CreateHubConfig(homeFolder)
	err := hc.Load(hubConfigFile, "plugin1")
	assert.NoError(t, err)
	assert.Equal(t, "info", hc.Loglevel)
}

func TestLoadHubConfigRelPath(t *testing.T) {
	logrus.Infof("Home is %s", homeFolder)
	configFile := path.Join(configFolder, "hub-relpath.yaml")
	ioutil.WriteFile(configFile, []byte(hubYamlRelPathTemplate), 0644)

	hc := config.CreateHubConfig(".")
	err := hc.Load(configFile, "plugin1")
	// all relative paths are set to the home folder which exists
	assert.NoError(t, err)
}

func TestSubstitute(t *testing.T) {
	substMap := make(map[string]string)
	substMap["{clientID}"] = "plugin1"
	hc := config.HubConfig{}
	err := config.LoadYamlConfig(hubConfigFile, &hc, substMap)
	assert.NoError(t, err)
	// ignore certificate warnings as no certs are present in this test
	// from the template file
	assert.Equal(t, "/var/log/plugin1.log", hc.LogFile)
}

func TestNoConfigObject(t *testing.T) {
	err := config.LoadYamlConfig(hubConfigFile, nil, nil)
	assert.Error(t, err)
}

func TestLoadHubConfigNotFound(t *testing.T) {
	hc := config.CreateHubConfig(homeFolder)
	configFile := path.Join(configFolder, "hub-notfound.yaml")
	err := hc.Load(configFile, "")
	assert.Error(t, err, "Configfile should not be found")
	assert.NotNil(t, hc, "Expected the default config")
}

func TestLoadHubConfigBadYamlError(t *testing.T) {
	clientID := "user1"
	fileName := path.Join(homeFolder, "badFile.yaml")

	ioutil.WriteFile(fileName, []byte(hubYamlBadTemplate), 0644)
	hc := config.CreateHubConfig(homeFolder)
	err := hc.Load(fileName, clientID)
	require.Error(t, err)
	assert.NotNil(t, hc)

	// Error should contain info on bad file
	errTxt := err.Error()
	assert.Equal(t, "yaml: line 9:", errTxt[:13], "Expected line 12 to be bad")
	assert.Error(t, err, "Configfile should not be found")
}

func TestLoadHubConfigBadFolders(t *testing.T) {

	hc := config.CreateHubConfig(homeFolder)
	err := hc.Validate()
	assert.NoError(t, err, "Default config should be okay")

	gc2 := *hc
	gc2.HomeFolder = "/not/an/app/folder"
	err = gc2.Validate()
	assert.Error(t, err)
	gc2 = *hc
	gc2.ConfigFolder = "./doesntexist"
	err = gc2.Validate()
	assert.Error(t, err)
	gc2 = *hc
	gc2.LogFolder = "/this/path/doesntexist"
	err = gc2.Validate()
	assert.Error(t, err)
	gc2 = *hc
	gc2.CertsFolder = "./doesntexist"
	err = gc2.Validate()
	assert.Error(t, err)
	gc2 = *hc
	// gc2.PluginFolder = "./doesntexist"
	// err = config.ValidateConfig(&gc2)
	// assert.Error(t, err)
}

func TestLoadAllConfig(t *testing.T) {
	clientID := "plugin1"
	// start with clean flags to avoid duplicate flag error
	os.Args = []string{os.Args[0]}
	flag.CommandLine = flag.NewFlagSet(os.Args[0], flag.ContinueOnError) //flags are now reset
	appConfig := TestConfig{}
	hubConfig, err := config.LoadAllConfig(os.Args, homeFolder, clientID, &appConfig)
	assert.NotNil(t, hubConfig)
	assert.NoError(t, err)
}

func TestLoadAllConfigNoConfigFile(t *testing.T) {
	clientID := "plugin1"
	// start with clean flags to avoid duplicate flag error
	os.Args = []string{os.Args[0]}
	flag.CommandLine = flag.NewFlagSet(os.Args[0], flag.ContinueOnError) //flags are now reset
	appConfig := TestConfig{}
	// a home folder of "" will use the parent of the binary as home
	hubConfig, err := config.LoadAllConfig(os.Args, "", clientID, &appConfig)
	assert.NotNil(t, hubConfig)
	assert.Error(t, err, "hub.yaml should not be found")
}

func TestAsMap(t *testing.T) {
	hc := config.CreateHubConfig("")
	asMap := hc.AsMap()
	require.NotEmpty(t, asMap)
	assert.Equal(t, hc.ConfigFolder, asMap["configFolder"])
}
